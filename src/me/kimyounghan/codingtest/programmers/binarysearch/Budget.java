package me.kimyounghan.codingtest.programmers.binarysearch;

import java.util.Arrays;

public class Budget {

    /**
     * Programmers > 이분탐색 > 예산
     *
     * 문제 설명
     * 국가의 역할 중 하나는 여러 지방의 예산요청을 심사하여 국가의 예산을 분배하는 것입니다. 국가예산의 총액은 미리 정해져 있어서 모든 예산요청을 배정해 주기는 어려울 수도 있습니다. 그래서 정해진 총액 이하에서 가능한 한 최대의 총 예산을 다음과 같은 방법으로 배정합니다.
     * 1. 모든 요청이 배정될 수 있는 경우에는 요청한 금액을 그대로 배정합니다.
     * 2. 모든 요청이 배정될 수 없는 경우에는 특정한 정수 상한액을 계산하여 그 이상인 예산요청에는 모두 상한액을 배정합니다. 상한액 이하의 예산요청에 대해서는 요청한 금액을 그대로 배정합니다.
     * 예를 들어, 전체 국가예산이 485이고 4개 지방의 예산요청이 각각 120, 110, 140, 150일 때, 상한액을 127로 잡으면 위의 요청들에 대해서 각각 120, 110, 127, 127을 배정하고 그 합이 484로 가능한 최대가 됩니다.
     * 각 지방에서 요청하는 예산이 담긴 배열 budgets과 총 예산 M이 매개변수로 주어질 때, 위의 조건을 모두 만족하는 상한액을 return 하도록 solution 함수를 작성해주세요.
     * 제한사항
     * 지방의 수는 3 이상 100,000 이하인 자연수입니다.
     * 각 지방에서 요청하는 예산은 1 이상 100,000 이하인 자연수입니다.
     * 총 예산은 지방의 수 이상 1,000,000,000 이하인 자연수입니다.
     * 입출력 예
     * budgets﻿	M	result
     * [120, 110, 140, 150]	485	127
     *
     * ------------------------------------------------------------------------------------
     *
     * @param budgets, M
     * @return
     */

    public int solution(int[] budgets, int M)
    {
        Arrays.sort(budgets); // 예산 배열을 정렬한다.
        int start = 0, end = budgets[budgets.length - 1]; // 시작값(0)과 끝값(150)을 정한다.
        while(start <= end)
        {
            int sum = 0;
            int mid = (start + end) / 2; // 시작값과 끝값의 중간값(75)
            for(int element : budgets)
                sum = element > mid ? sum + mid : sum + element; // 예산이 중간값보다 크면 중간값을 더하고, 중간값보다 작으면 예산을 더한다.
            if(sum > M) end = mid - 1; // 합이 총 예산보다 클 때, 중간값에서 1을 뺀 값(74)을 끝값에 할당한다.
            else
                start = mid + 1; // 합이 총 예산보다 작을 때, 중간값에서 1을 더한 값(76)을 시작값에 할당한다.
        }
        return end;
    }
}
